% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/geos_stats.R
\name{geos_stats}
\alias{geos_stats}
\alias{st_geometry_summary}
\alias{st_area_sum}
\alias{st_length_sum}
\alias{st_perimeter_sum}
\alias{st_perimeter_2d_sum}
\title{Summary statistical functions for \code{sfg}, \code{sfc} and \code{sf} objects}
\usage{
st_geometry_summary(x)

st_area_sum(x, value, digits, ...)

st_length_sum(x, value, digits, ...)

st_perimeter_sum(x, value, digits)

st_perimeter_2d_sum(x, value, digits)
}
\arguments{
\item{x}{object of class \code{sfg}, \code{sfc} or \code{sf}}

\item{value}{object of class \code{units} or \code{symbolic_units} (see
examples section of \code{\link[units]{units}}\code{() <- value}),
optional: if unspecified, the default unit of the output is returned}

\item{digits}{integer indicating the number of decimal places to be used (see
\code{\link[base]{round}}), optional: if unspecified, the output is not
rounded}

\item{...}{passed on to \code{\link[s2]{s2_distance}} or \code{\link[s2]{s2_distance_matrix}}}
}
\value{
\code{st_geometry_summary()} returns a vector with counts of the
geometry types include in \code{x}, which is named by the occurring geometry
type(s). If a function of the type \code{st_measure_sum()} is executed, the
\code{\link[base]{sum}} of these very measures from all geometries
included in \code{x} is returned, if specified in a certain unit and rounded
by given digits (see
\code{\link[sf]{st_area}}, \code{\link[sf]{st_length}},
\code{\link[lwgeom]{st_perimeter}} resp.
\code{\link[lwgeom]{st_perimeter_2d}}).
}
\description{
Summary statistical functions for \code{sfg}, \code{sfc} and \code{sf} objects
}
\examples{
library(sf)
# some demo data
mat      <- rbind(0:3, log(4:1))*1000 + rep(c(26, 12), 4)*10^5
points   <- st_sfc(lapply(data.frame(mat), st_point)) \%>\% st_set_crs(2056)
polygons <- points \%>\% st_buffer(., seq_along(.)*150)

mix <- c(points, polygons)
st_geometry_summary(mix)

st_area_sum(polygons)
st_area_sum(polygons, "ha", 2)
st_area_sum(polygons, "km^2", 3)

# if geometries' dimension and measure don't fit:
st_length_sum(polygons)

st_perimeter_sum(polygons, "km", 1)

# specifying only units doesn't effect comparison:
st_area_sum(polygons, "km^2") == st_area_sum(polygons, "ha")
# but setting units and rounding by digits argument can mess up comparison:
st_area_sum(polygons, "km^2") == st_area_sum(polygons, "ha", 0)
# if equivalent units-digits-specifying is done, comparison is feasible:
st_area_sum(polygons, "km^2", 2) == st_area_sum(polygons, "ha", 0)
# but to avoid a mess don't specify the digits before comparing

# similarly if returns are used in further calculations then don't specify
# the digits to avoid passing on rounding errors
(ratio <- st_perimeter_sum(polygons) / st_area_sum(polygons, "ha"))
# rounding cant be done later on
round(ratio)
}
