% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/st_rbindlist.R
\name{st_rbindlist}
\alias{st_rbindlist}
\title{Convert a list of sf objects to a single sf object}
\usage{
st_rbindlist(l, ..., use_geometry = FALSE, geometry_name = NULL)
}
\arguments{
\item{l}{\code{list} of objects of the class \code{sf}}

\item{...}{arguments of the function \code{\link[data.table]{rbindlist}}
except \code{l}}

\item{use_geometry}{\code{TRUE} detects and binds the active list-columns
with simple feature geometries separately, thus enabling matching of geometry
columns differing by name as well as by position across the \code{list}ed sf
objects.}

\item{geometry_name}{a single character string giving a user-defined name to
the returned active list-column with simple feature geometries. If
unspecified / by default (\code{NULL}), the geometry column name is inherited
from the first \code{sf} object \code{list}ed in the input.}
}
\value{
a \code{sf} object
}
\description{
A fast alternative to \code{do.call(rbind, <list_of_sf>)}
}
\details{
\code{st_rbindlist()} is basically a wrapper for
\code{sf::st_as_sf(data.table::rbindlist(<list_of_sf>))}, which is a fast
alternative to \code{do.call(rbind, <list_of_sf>)}. It comes with some
properties which \code{rbind} has, but \code{rbindlist} misses:
\itemize{
\item checks if all \code{sf} objects included in the input share the same
CRS
\item returns a \code{sf} object with a correct \code{bbox} (more
information on how to handle this \code{rbindlist} issue can be found
\href{https://github.com/Rdatatable/data.table/issues/4681}{here}).
\item allows binding \code{sf} objects with different geometry types
}
Remarks about matching geometry columns of input \code{sf} objects:
\itemize{
\item If the geometry columns are identically named, but differ by position
within
each \code{sf} object, set \code{use.names = TRUE} and \code{fill = TRUE}.
\item If the geometry (and other) columns are differently named, but have
same position within every \code{sf} object, set \code{use.names = FALSE}.
\item If the geometry columns are differently named and at the same time
differently positioned, set \code{use_geometry = TRUE}. This detects the
geometry columns and then matches them separately while the other columns
can still be treated collectively by the arguments \code{use.names} and
\code{fill}. Note that matching geometry columns separately requires more
processing time.
}
}
\examples{
library(sf)

# a set of geometries to work with
nc <- st_read(system.file("gpkg/nc.gpkg", package = "sf"), quiet = TRUE)

# proof of concept with a list of sf-objects having identically named and
# positioned attribute and geometry columns:
list_of_sf <- lapply(1:nrow(nc), function(x) nc[x, ])
nc_new <- st_rbindlist(list_of_sf)
all.equal(nc, nc_new)

# list of sf-objects having differently named, but identically positioned
# geometry columns (attribute columns are also same-positioned and still
# same-named):
list_of_sf <- lapply(
  1:nrow(nc),
  function(x) st_rename_geometry(nc[x, ], paste0("geom_", x))
  )
# such a list of sf-objects is easy to stack ...
nc_new_2 <- st_rbindlist(list_of_sf, use.name = FALSE)
# ... but by default the name of the returned geometry column ...
attr(nc_new_2, "sf_column")
# ... is inherited from the first listed sf-object:
attr(nc_new_2, "sf_column") == attr(list_of_sf[[1]], "sf_column")
# user defined name of the stacked geometry column:
nc_new_3 <- st_rbindlist(list_of_sf, use.name = FALSE, geometry_name = "geom")
attr(nc_new_3, "sf_column")

# from which listed element / sf-object do the stacked features originate?
l <- list(A = nc[1, 1:3], B = NULL, C = nc[2:3, 1:3])
st_rbindlist(l, idcol = "ID")

# list of sf-objects with identically named, but differently positioned
# geometry and attribute columns (the latter might not be included in
# each listed sf-object) ...
l <- list(nc[1, NULL], nc[2, 1], nc[3, 2:3])
# ... requires use.name = TRUE and fill = TRUE:
st_rbindlist(l, use.name = TRUE, fill = TRUE, idcol = TRUE)

# list of sf-objects with differently named and positioned geometry columns,
# and (if existing) identically named attribute columns ...
l <- lapply(
  seq_along(l),
  function(x) st_rename_geometry(l[[x]], paste0("geom_", x))
  )
sapply(l, attr, "sf_column") # geometry column names of listed sf-objects

# ... requires use_geometry = TRUE for detecting and binding the geometry
# columns (separately from the attribute columns):
st_rbindlist(l, use.name = TRUE, fill = TRUE, idcol = TRUE, use_geometry = TRUE)

# note: if use_geometry = TRUE, the name of the returned geometry column ...
# ... is by default inherited from the first listed sf-object. The user ...
# ... can set an alternative geometry column name:
st_rbindlist(l, use.name = TRUE, fill = TRUE, idcol = TRUE, use_geometry = TRUE,
             geometry_name = "geom")
}
\seealso{
\href{../doc/rbindlist_issues.html}{\code{vignette("rbindlist_issues")}}
}
